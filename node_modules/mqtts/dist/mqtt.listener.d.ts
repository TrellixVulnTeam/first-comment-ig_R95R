import { MqttMessage } from './mqtt.message';
import { IncomingListenMessage } from './mqtt.types';
export declare class MqttListener {
    private handlers;
    handleMessage(message: MqttMessage): Promise<void[]>;
    addHandler<T, Params extends Record<string, string>>(handler: HandlerInfo<T, Params>): RemoveHandlerFn;
}
export declare type RemoveHandlerFn = () => void;
export declare type HandlerFn<T = MqttMessage> = (message: T) => void;
export declare type ValidatorFn<Params extends Record<string, string>> = (message: MqttMessage, params: Params) => boolean;
export declare type TransformerFn<TOut, Params extends Record<string, string>> = (message: IncomingListenMessage<Params>) => TOut | Promise<TOut>;
export interface HandlerInfo<T, Params extends Record<string, string>> {
    topicFilter: string;
    paramMatcher?: string;
    validator?: ValidatorFn<Params>;
    transformer?: TransformerFn<T, Params>;
    handle: HandlerFn<T>;
}
